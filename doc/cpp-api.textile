---
layout: default
title: "C++ API Documentation"
lang: en
---

h1. C++ API Documentation

h2. Draw a sketch

<div class="float">
<pre>
#include <iostream>
#include <string>

#include <madoka.h>

int main(int argc, char *argv[]) {
  madoka::Sketch sketch;
  sketch.create();

  std::string key;
  while (std::getline(std::cin, key)) {
    sketch.inc(key.c_str(), key.length());
  }

  sketch.save(argv[1]);
  return 0;
}
</pre>
</div>

Let's try to draw a sketch! This example reads a keyset from standard input (<code>std::cin</code>) and draws a sketch (<code>madoka::Sketch</code>). Then, this example saves the sketch to a file specified by the first command line argument (<var><notextile>argv[1]</notextile></var>). The following are the points of this example.

* <kbd>madoka.h</kbd>
** <code>#include <madoka.h></code> is needed to use Madoka. Data types, constants and classes are defined in <kbd>madoka.h</kbd>.
* <code>madoka::Sketch</code>
** <code>madoka::Sketch</code> represents a sketch and provides functions for sketching.
* <code>madoka::Sketch::create()</code>
** <code>create()</code> is a function to make a sketch. You must not start sketching before making a sketch.
* <code>madoka::Sketch::inc()</code>
** <code>inc()</code> is a function to increment values associated with a given key. The 1st argument specifies the starting address and the 2nd argument specifies the length in bytes. Yeah, this is sketching.
* <code>madoka::Sketch::save()</code>
** <code>save()</code> is a function to save a sketch. The 1st argument specifies the path of the file.

<div class="float">
<pre>
$ g++ sample.cc -lmadoka
$ ./a.out SKETCH < KEYSET
</pre>
</div>

Note that an option <kbd>-lmadoka</kbd> is needed to build this example. If you have installed Madoka, <kbd>pkg-config madoka --libs</kbd> is available to get the required options.

h2. Look at a sketch

h2. Configure a sketch

h2. Namespace

<div class="float">
<pre>
namespace madoka {
// ...
}  // namespace madoka
</pre>
</div>

The C++ API of Madoka uses a namespace <code>madoka</code>. Types and constants are defined in this namespace.

h2. Types

h3. Integers

<div class="float">
<pre>
typedef uint8_t  UInt8;
typedef uint16_t UInt16;
typedef uint32_t UInt32;
typedef uint64_t UInt64;
</pre>
</div>

h3. Filter

<div class="float">
<pre>
typedef UInt64 (*SketchFilter)(UInt64);
</pre>
</div>

h3. Classes

<div class="float">
<pre>
class Sketch;
</pre>
</div>

h2. Constants

<div class="float">
<pre>
enum SketchMode {
  SKETCH_EXACT_MODE,
  SKETCH_APPROX_MODE
};

enum FileFlag {
  FILE_CREATE,
  FILE_TRUNCATE,
  FILE_READONLY,
  FILE_WRITABLE,
  FILE_SHARED,
  FILE_PRIVATE,
  FILE_ANONYMOUS,
  FILE_HUGETLB,
  FILE_PRELOAD
};
</pre>
</div>

h2. Class

<div class="float">
<pre>
class Sketch {
 public:
  typedef SketchFilter Filter;
  typedef SketchMode Mode;

  Sketch() throw();
  ~Sketch() throw();

  void create(UInt64 width = 0, UInt64 max_value = 0,
              const char *path = NULL, int flags = 0,
              UInt64 seed = 0) throw(Exception);
  void open(const char *path, int flags = 0) throw(Exception);
  void close() throw();

  void load(const char *path, int flags = 0) throw(Exception);
  void save(const char *path, int flags = 0) const throw(Exception);

  UInt64 width() const throw();
  UInt64 width_mask() const throw();
  UInt64 depth() const throw();
  UInt64 max_value() const throw();
  UInt64 value_mask() const throw();
  UInt64 value_size() const throw();
  UInt64 seed() const throw();
  UInt64 table_size() const throw();
  UInt64 file_size() const throw();
  int flags() const throw();
  Mode mode() const throw();

  UInt64 get(const void *key_addr, std::size_t key_size) const throw();
  void set(const void *key_addr, std::size_t key_size, UInt64 value) throw();
  UInt64 inc(const void *key_addr, std::size_t key_size) throw();
  UInt64 add(const void *key_addr, std::size_t key_size, UInt64 value) throw();

  void clear() throw();

  void copy(const Sketch &src, const char *path = NULL,
            int flags = 0) throw(Exception);

  void filter(Filter filter) throw();

  void shrink(const Sketch &src, UInt64 width = 0,
              UInt64 max_value = 0, Filter filter = NULL,
              const char *path = NULL, int flags = 0) throw(Exception);

  void merge(const Sketch &rhs, Filter lhs_filter = NULL,
             Filter rhs_filter = NULL) throw(Exception);

  void swap(Sketch *sketch) throw();

  double inner_product(const Sketch &rhs, double *lhs_square_length = NULL,
      double *rhs_square_length = NULL) const throw(Exception);
};
</pre>
</div>

h2. 
